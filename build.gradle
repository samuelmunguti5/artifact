buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
		jcenter()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
	classpath "gradle.plugin.de.gliderpilot.gradle.semantic-release:gradle-semantic-release-plugin:1.4.0"
	classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    classpath "com.github.zafarkhaja:java-semver:0.9.0"

    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
	id "de.gliderpilot.semantic-release" version "1.4.0"
     id "org.ajoberstar.grgit" version "1.4.2"
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
apply plugin: "org.sonarqube"
apply plugin: "de.gliderpilot.semantic-release"
apply plugin: 'maven-publish'

}


group 'Build Name'

ext {
    middlewareHome ="/versionControl/jdeveloper/" 
    ojDeployExec = middlewareHome + "/jdeveloper/jdev/bin/ojdeploy"
    adfWorkspace = "/var/lib/jenkins/jobs/EAUL/workspace"
    adfWorkspaceDeployDir = "${adfWorkspace}/deploy"
    ojDeployAppWorkspaceDir = new File(adfWorkspace).getAbsolutePath()
	ojDeployBuildfile = "${ojDeployAppWorkspaceDir}/ojdeploy-buildfile.xml"
	gradleTargetDir = "${ojDeployAppWorkspaceDir}/build"

}
sonarqube {
    //More: https://docs.sonarqube.org/display/SONAR/Analysis+Parameters
    properties {
        properties["sonar.host.url"] = "http://10.176.18.70:9000"
        properties["sonar.projectKey"] = "${project.group}:TurnquestGISV5"
        properties["sonar.projectVersion"] = "${project.version}"
        properties["sonar.language"] = "java"
        properties["sonar.projectBaseDir"] = "${ojDeployAppWorkspaceDir}"
        properties["sonar.java.binaries"] = "${ojDeployAppWorkspaceDir}/classes/"
        properties["sonar.sources"] = "${ojDeployAppWorkspaceDir}/src,${ojDeployAppWorkspaceDir}/GisModel/src"

    }
}

task  checkAdfEnvironment {
    group "oracle-adf"
    description "Check if ADF environment configured correctly"
    doLast {
        if (project.ext.middlewareHome == null ) {
            throw new GradleException("Missing project property [middlewareHome]. " +
                    "Add -PmiddlewareHome=<MIDDLEWARE_HOME> switch to gradle invomation")
        }
    }
}

task clean {
    group "oracle-adf"
    description "Clean ADF workspace"
    mustRunAfter checkAdfEnvironment
    dependsOn checkAdfEnvironment
    doLast {
        println "Cleaning project ${project.name}"

        println "Deleting ${project.ext.adfWorkspaceDeployDir}"
        delete fileTree(project.ext.adfWorkspaceDeployDir)

        println "Deleting ${project.ext.gradleTargetDir}"
        delete fileTree(project.ext.gradleTargetDir)
    }
}




task assemble {
    group "oracle-adf"
    description "Build ADF artficats"
    mustRunAfter clean, checkAdfEnvironment
    dependsOn clean, checkAdfEnvironment
    doLast {
        println "Building using OJDeploy:"
        //Build
        exec {
            commandLine project.ext.ojDeployExec, '-buildfile', project.ext.ojDeployBuildfile, '-define', "app.workspace.dir=${project.ext.ojDeployAppWorkspaceDir}"
        }
    }
}



//http://ryanharter.com/blog/2013/07/30/automatic-versioning-with-git-and-gradle/
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

version=getVersionName()


publishing {
    publications {
        jar(MavenPublication) {
            artifact('gislib/help-share.jar') {
                classifier 'help-share'
                extension 'jar'
            }
            artifact('deploy/GISLIBERTY.ear') {
                classifier 'GISLIBERTY'
                extension 'ear'
            }
            artifact('gislib/dom4j.jar') {
                classifier 'dom4j'
                extension 'jar'
            }
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = 'gradle-release-local'

            username = "${artifactory_user}"
            password = "${artifactory_password}"
maven=true
        }
 resolve {
        repository {
            repoKey = 'gradle-release-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            //maven = true
            ivy {
                ivyLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).pom'
                artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
              //  mavenCompatible = true
            }
        }
    }

        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
        publications('jar')
            publishArtifacts = true

            // Properties to be attached to the published artifacts.
           // properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
          //  publishPom = true
        }
    }
}


tasks.sonarqube.mustRunAfter assemble


